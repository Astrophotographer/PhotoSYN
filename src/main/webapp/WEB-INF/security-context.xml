<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
						    http://www.springframework.org/schema/beans/spring-beans.xsd
						    http://www.springframework.org/schema/security
						    http://www.springframework.org/schema/security/spring-security.xsd">

    <!--접근 제한시 처리할 핸들러 빈으로 등록 -->
    <bean id="memberAccessDenied" class="com.member.security.MemberAccessDeniedHandler"/>
    <!-- 비밀번호 보호를 위한 암호화 클래스 빈으로 등록 -->
    <bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
    <!-- 시큐리티에서 우리가 원하는 형태의 회원테이블로 처리되기 위한 클래스 빈으로 등록 -->
    <bean id="memberUserDetailsService" class="com.member.security.MemberUserDetailsService"/>
    <!-- 로그인 성공시 처리 핸들러 등록 -->
    <bean id="memberLoginSuccessHandler" class="com.member.security.MemberLoginSuccessHandler"/>
    <!-- 로그아웃 성공 처리 핸들러 -->
    <bean id="memberLogoutSuccessHandler" class="com.member.security.MemberLogoutSuccessHandler"/>

    <!-- 블로그 이미지 업로드 시 인증예외처리 -->
<!--    <security:http pattern="/blog/write**" security="none"/>-->

    <!-- 접근제한 설정 -->
    <security:http>

        <!-- 특정 URI에 접근 제한 설정 -->
        <security:intercept-url pattern="/member/*" access="permitAll"/>
        <security:intercept-url pattern="/member/mypage/*" access="hasRole('ROLE_MEMBER')"/>
        <security:intercept-url pattern="/admin/*" access="hasRole('ROLE_ADMIN')"/>
        <!-- 접근 제한시 403 페이지 대신 보여줄 페이지 세팅 아래 bean 적용하면 -->
        <security:access-denied-handler error-page="/member/accessError"/>
        <security:access-denied-handler ref="memberAccessDenied"/>
        <!-- 시큐리티 로그인페이지를 커스텀 경로로 변경(우리가 만든 로그인폼으로 경로변경) -->
        <security:form-login login-page="/member/login" authentication-success-handler-ref="memberLoginSuccessHandler"/>
        <!-- 시큐리티로 로그아웃 처리 -->
        <security:logout logout-url="/logout" invalidate-session="true" delete-cookies="JSESSION_ID, remember-me"
                         success-handler-ref="memberLogoutSuccessHandler"/>
        <!-- 자동로그인 처리 data-source-ref : DB에 접근 가능한 DataSource를 지정, 테이블 이용해 로그인 정보 접근 -->
        <!-- token-validity-seconds : 쿠키 유효시간 설정 : 604800초(7일) -->
        <security:remember-me data-source-ref="dataSource" token-validity-seconds="604800"/>

        <!-- false로 나중에 살려주기 -->
        <!-- false일시 post 방식시 csrf 토큰을 사용하도록 설정 -->
        <security:csrf disabled="false"/>
    </security:http>

    <!-- 인증과 권한 처리해주는 태그 -->
    <security:authentication-manager>
        <!-- 권한에 대한 인증 해주는 authentication-provider -->
        <security:authentication-provider user-service-ref="memberUserDetailsService">
            <security:password-encoder ref="bcryptPasswordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

</beans>